//    Archiverify is an archive synching and verification tool
//    Copyright (C) 2014  Daniel Corder (contact: archiverify@dancorder.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'

mainClassName = 'com.dancorder.Archiverify.Archiverify'
version = getVersionTag()
archivesBaseName = 'Archiverify-no-dependencies'

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

buildscript {
	repositories {
		flatDir { dirs 'gradlePlugins' }
		mavenCentral()
	}
	dependencies { classpath 'com.github.rholder:gradle-one-jar:1.0.4' }
}

// Use local copies of dependencies first, then get from Maven if needed
repositories {
    flatDir {
        dirs 'lib', 'libTest'
    }
    mavenCentral()
}

dependencies {
    compile     'commons-codec:commons-codec:1.9',
                'commons-cli:commons-cli:1.2',
                'org.apache.commons:commons-lang3:3.0'
    testCompile 'junit:junit:4.10',
                'org.codehaus.groovy:groovy-all:2.0.5',
                'org.spockframework:spock-core:0.7-groovy-2.0',
                'cglib:cglib-nodep:2.2.2',
                'org.objenesis:objenesis:2.1'
}

// Copy dependencies into the git repository
task copyToLib(type: Copy) {
    into 'lib'
    from configurations.runtime
}

task copyToTestLib(type: Copy) {
    into 'libTest'
    from configurations.testRuntime
}

jar.dependsOn copyToLib
test.dependsOn copyToTestLib

task buildOneJar(type: OneJar) {
	mainClass = mainClassName
	additionalDir = file('oneJarConfig')
	archiveName = 'Archiverify-' + getVersionTag() + '.jar'
	dependsOn test
}

sourceSets {
    test {
        groovy {
            srcDirs += 'src/testHelpers/groovy'
        }
    }
    systemTest {
        groovy {
            srcDirs += 'src/testHelpers/groovy'
        }
    }
}


configurations {
    systemTestCompile.extendsFrom testCompile
    systemTestRuntime.extendsFrom testRuntime
}

task systemTest(type: Test) {
    testClassesDir = sourceSets.systemTest.output.classesDir
    classpath = sourceSets.systemTest.runtimeClasspath
    dependsOn buildOneJar
}

task buildRelease {
    dependsOn systemTest
}

jar {
    manifest {
        attributes(
            'Main-Class': mainClassName,
            'Implementation-Version': project.version)
    }
}

def getVersionTag() {
    def stdout = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'describe', '--tag', '--match', 'v*.*.*'
        standardOutput = stdout
    }

    return stdout.toString().trim()
}
